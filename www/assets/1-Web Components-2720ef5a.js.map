{"version":3,"file":"1-Web Components-2720ef5a.js","sources":["../../../components/README.md?raw","../../stories/packages/components/1-Web Components.mdx"],"sourcesContent":["export default \"# @synergy-design-system/components\\n\\nThis package provides the base of the Synergy Design System as native web components.\\nIt uses [lit](https://www.lit.dev) and parts of [shoelace](https://shoelace.style/).\\n\\n## Getting started\\n\\n### 1. Package installation\\n\\nRun the following steps to install the required packages.\\n\\n```bash\\n# Install the base library and required css files\\nnpm install --save @synergy-design-system/components @synergy-design-system/tokens\\n```\\n\\n---\\n\\n### 2. Load the design tokens\\n\\nThe shipped components make heavy use of design tokens, which are provided via [@synergy-design-system/tokens](https://github.com/synergy-design-system/synergy-design-system/tree/main/packages/tokens). Make sure to follow the installation steps there for help on setting the tokens up. Usually it is enough to load the light or dark theme included there.\\n\\n---\\n\\n### 3. Define the elements\\n\\nThere are multiple ways to load the components:\\n\\n#### Loading all available components\\n\\nTo make all components available, just load the main package file. It will make sure that all components and needed dependencies are loaded and available directly.\\n\\n> Please keep in mind that this way of loading the components will create larger bundle sizes!\\n\\n```html\\n<!-- Example 1: Loading via script type module -->\\n<!doctype html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\">\\n      <syn-button variant=\\\"text\\\">Button</syn-button>\\n      <syn-input></syn-input>\\n    </div>\\n    <!-- As we are loading all modules, syn-button and syn-input will render correctly -->\\n    <script type=\\\"module\\\" src=\\\"../node_modules/@synergy-design-system/components/dist/synergy.js\\\"></script>\\n  </body>\\n</html>\\n```\\n\\nWhen using a build system, you should load the bundle in JavaScript or TypeScript directly, for example when using vite:\\n\\n```typescript\\n// main.ts\\n\\n// Do not forget to load the design tokens!\\nimport '@synergy-design-system/tokens/themes/light.css';\\n\\n// This will load synergy.js via the exports map\\nimport '@synergy-design-system/components';\\n```\\n\\n#### Loading selected components only\\n\\nUse this when you need complete control about which components are loaded. This will usually lead to smaller bundle sizes, which might be preferable for your application. As a downside, you will have to remember adding missing components to your bundle.\\n\\n```html\\n<!-- Example 1: Loading via script type module -->\\n<!doctype html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\">\\n      <syn-button variant=\\\"text\\\">Button</syn-button>\\n      <syn-input></syn-input>\\n    </div>\\n    <!-- We are only loading the button, syn-input will render as an empty div! -->\\n    <script type=\\\"module\\\" src=\\\"../node_modules/@synergy-design-system/components/dist/components/button/button.js\\\"></script>\\n  </body>\\n</html>\\n```\\n\\nWhen using a build system, you may also load the bundle in JavaScript or TypeScript directly, for example when using vite:\\n\\n```typescript\\n// main.ts\\n\\n// Do not forget to load the design tokens!\\nimport '@synergy-design-system/tokens/themes/light.css';\\n\\n// This will only load and define the button itself\\nimport '@synergy-design-system/components/components/button/button.js';\\n```\\n\\n---\\n\\n### 4. Using the provided types\\n\\nThe components are built using typescript and provide types for elements and events out of the box. These can be used for working with the dom when working in a typescript environment. You may use them by importing the needed types and using them for elements, like shown in this example:\\n\\n```typescript\\n// main.ts\\n\\n// Do not forget to load the design tokens!\\nimport '@synergy-design-system/tokens/themes/light.css';\\n\\n// Example 1: Load the type for syn-button from the root:\\nimport type { SynButton, SynInvalidEvent } from '@synergy-design-system/components';\\n\\n// Example 2: Load the type from the syn-button dir directly.\\n// In this case you will have to load the event type from another file!\\nimport type { SynButton } from '@synergy-design-system/components/components/button/button.component';\\nimport type { SynInvalidEvent } from '@synergy-design-system/components/events/events';\\n\\ndocument.addEventListener('load', () => {\\n  const loadedSynButtons = document.querySelectorAll<SynButton>('syn-button');\\n\\n  // Attach a syn-invalid event that is fired every time a button becomes invalid\\n  Array\\n    .from(loadedSynButtons) // Type: SynButton[]\\n    .addEventListener('syn-invalid', (e: SynInvalidEvent) => {\\n      console.log('Button is now invalid!', e);\\n    });\\n});\\n```\\n\\n---\\n\\n### 5. Add html autocompletion to VSCode (optional)\\n\\nThis package ships with a [custom-elements-manifest](https://github.com/webcomponents/custom-elements-manifest) that may be used to provide typings for tags. To enable code completion, please proceed the following way:\\n\\n1. Install the `@synergy-design-system/components` package.\\n2. If you do **not** have a `.vscode/settings.json` file yet, create it.\\n3. Add support for [vscode-custom-data](https://github.com/microsoft/vscode-custom-data) by adding the following setting to your `.vscode/settings.json`: `\\\"html.customData\\\": [\\\"./node_modules/@synergy-design-system/components/dist/vscode.html-custom-data.json\\\"]`\\n4. Restart VSCode.\\n5. Switch to an html (or similar) file and type `<syn`. Auto-complete now provides a list of available components along with its attributes.\\n\\n> Note the path above is valid for installations using npm.\\n> When using another package manager, make sure to set the proper path to `vscode.html-custom-data.json`!\\n\\n---\\n\\n## Local setup\\n\\n### Using the vendor cli\\n\\nThe vendor cli is taking care about updating our code base according to a new version of shoelace.\\n\\nTo change the shoelace version, that should be downloaded, change the version in the config of `./scripts/vendorism.js`.\\nTo download it use the command `pnpm vendor.get`.\\nIf code in our components library should be updated to this new shoelace version use `pnpm vendor.set`.\\n\\nAll shoelace files are per default readonly and are disabled from being changed. To change this files can be ejected. This can be done via:\\n`pnpm vendor.eject \\\"src/declaration.d.ts\\\"`.\\n\\n### Adding events to the output\\n\\nTo add events to the component output, make sure to add them to `src/scripts/vendorism.js` into the `events` array that is defined there. After a new build run `via pnpm build`, you will see the new event files and the `events/events.ts` file will be regenerated.\\n\"","import { Markdown, Meta } from \"@storybook/blocks\";\nimport Readme from \"../../../../components/README.md?raw\";\n\n<Meta title=\"Packages/Components/Web Components\" />\n\n<Markdown>{Readme}</Markdown>\n"],"names":["Readme","_createMdxContent","props","_jsxs","_Fragment","_jsx","Meta","Markdown","MDXContent","MDXLayout","_provideComponents"],"mappings":"8TAAA,MAAef,SAASC,EAAkBC,EAAO,CAChC,OAAOC,EAAAA,KAAMC,EAAAA,SAAW,CACtB,SAAU,CAACC,EAAI,IAACC,EAAM,CACpB,MAAO,oCACb,CAAK,EAAG;AAAA,EAAMD,EAAI,IAACE,EAAU,CACvB,SAAUP,CAChB,CAAK,CAAC,CACN,CAAG,CACH,CACA,SAASQ,EAAWN,EAAQ,GAAI,CAC9B,KAAM,CAAC,QAASO,CAAS,EAAI,OAAO,OAAO,CAAE,EAAEC,EAAoB,EAAER,EAAM,UAAU,EACrF,OAAOO,EAAYJ,EAAAA,IAAKI,EAAW,OAAO,OAAO,CAAE,EAAEP,EAAO,CAC1D,SAAUG,EAAAA,IAAKJ,EAAmBC,CAAK,CAC3C,CAAG,CAAC,EAAID,EAAuB,CAC/B"}