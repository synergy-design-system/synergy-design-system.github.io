{"version":3,"file":"radio-group-c951597a.js","sources":["../../../components/src/components/button-group/button-group.styles.ts","../../../components/src/components/button-group/button-group.component.ts","../../../components/src/components/radio-group/radio-group.custom.styles.ts","../../../components/src/components/radio-group/radio-group.styles.ts","../../../components/src/components/radio-group/radio-group.component.ts","../../../components/src/components/radio-group/radio-group.ts"],"sourcesContent":["// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n/* eslint-disable */\nimport { css } from 'lit';\nimport componentStyles from '../../styles/component.styles.js';\n\nexport default css`\n\t/* stylelint-disable */\n  ${componentStyles}\n\n  :host {\n    display: inline-block;\n  }\n\n  .button-group {\n    display: flex;\n    flex-wrap: nowrap;\n  }\n`;\n","// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n/* eslint-disable */\nimport { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport SynergyElement from '../../internal/synergy-element.js';\nimport styles from './button-group.styles.js';\nimport type { CSSResultGroup } from 'lit';\n\n/**\n * @summary Button groups can be used to group related buttons into sections.\n * @documentation https://synergy.style/components/button-group\n * @status stable\n * @since 2.0\n *\n * @slot - One or more `<syn-button>` elements to display in the button group.\n *\n * @csspart base - The component's base wrapper.\n */\nexport default class SynButtonGroup extends SynergyElement {\n  static styles: CSSResultGroup = styles;\n\n  @query('slot') defaultSlot: HTMLSlotElement;\n\n  @state() disableRole = false;\n\n  /**\n   * A label to use for the button group. This won't be displayed on the screen, but it will be announced by assistive\n   * devices when interacting with the control and is strongly recommended.\n   */\n  @property() label = '';\n\n  private handleFocus(event: Event) {\n    const button = findButton(event.target as HTMLElement);\n    button?.classList.add('syn-button-group__button--focus');\n  }\n\n  private handleBlur(event: Event) {\n    const button = findButton(event.target as HTMLElement);\n    button?.classList.remove('syn-button-group__button--focus');\n  }\n\n  private handleMouseOver(event: Event) {\n    const button = findButton(event.target as HTMLElement);\n    button?.classList.add('syn-button-group__button--hover');\n  }\n\n  private handleMouseOut(event: Event) {\n    const button = findButton(event.target as HTMLElement);\n    button?.classList.remove('syn-button-group__button--hover');\n  }\n\n  private handleSlotChange() {\n    const slottedElements = [...this.defaultSlot.assignedElements({ flatten: true })] as HTMLElement[];\n\n    slottedElements.forEach(el => {\n      const index = slottedElements.indexOf(el);\n      const button = findButton(el);\n\n      if (button) {\n        button.classList.add('syn-button-group__button');\n        button.classList.toggle('syn-button-group__button--first', index === 0);\n        button.classList.toggle('syn-button-group__button--inner', index > 0 && index < slottedElements.length - 1);\n        button.classList.toggle('syn-button-group__button--last', index === slottedElements.length - 1);\n        button.classList.toggle('syn-button-group__button--radio', button.tagName.toLowerCase() === 'syn-radio-button');\n      }\n    });\n  }\n\n  render() {\n    // eslint-disable-next-line lit-a11y/mouse-events-have-key-events\n    return html`\n      <div\n        part=\"base\"\n        class=\"button-group\"\n        role=\"${this.disableRole ? 'presentation' : 'group'}\"\n        aria-label=${this.label}\n        @focusout=${this.handleBlur}\n        @focusin=${this.handleFocus}\n        @mouseover=${this.handleMouseOver}\n        @mouseout=${this.handleMouseOut}\n      >\n        <slot @slotchange=${this.handleSlotChange}></slot>\n      </div>\n    `;\n  }\n}\n\nfunction findButton(el: HTMLElement) {\n  const selector = 'syn-button, syn-radio-button';\n\n  // The button could be the target element or a child of it (e.g. a dropdown or tooltip anchor)\n  return el.closest(selector) ?? el.querySelector(selector);\n}\n","import { css } from 'lit';\n\nexport default css`\n  ::slotted(syn-radio:not(:last-child)) {\n    margin-bottom: var(--syn-spacing-x-small);\n  }\n\n  :host([data-user-invalid]) {\n    --syn-input-border-color: var(--syn-input-border-color-focus-error);\n    --syn-input-border-color-hover: var(--syn-input-border-color-focus-error);\n    --syn-color-primary-600: var(--syn-color-error-700);\n    --syn-color-primary-900: var(--syn-color-error-900);\n    --syn-color-primary-950: var(--syn-color-error-950);\n  }\n\n  .form-control--has-help-text.form-control--radio-group .form-control__help-text {\n    margin-top: var(--syn-spacing-x-small);\n  }\n\n`;\n","// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n/* eslint-disable */\nimport { css } from 'lit';\nimport customStyles from './radio-group.custom.styles.js';\nimport componentStyles from '../../styles/component.styles.js';\nimport formControlStyles from '../../styles/form-control.styles.js';\n\nexport default css`\n\t/* stylelint-disable */\n  ${componentStyles}\n  ${formControlStyles}\n\n  :host {\n    display: block;\n  }\n\n  .form-control {\n    position: relative;\n    border: none;\n    padding: 0;\n    margin: 0;\n  }\n\n  .form-control__label {\n    padding: 0;\n  }\n\n  .radio-group--required .radio-group__label::after {\n    content: var(--syn-input-required-content);\n    margin-inline-start: var(--syn-input-required-content-offset);\n  }\n\n  .visually-hidden {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n\n  ${customStyles}\n`;\n\n","// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n/* eslint-disable */\nimport { classMap } from 'lit/directives/class-map.js';\nimport {\n  customErrorValidityState,\n  FormControlController,\n  validValidityState,\n  valueMissingValidityState\n} from '../../internal/form.js';\nimport { HasSlotController } from '../../internal/slot.js';\nimport { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { watch } from '../../internal/watch.js';\nimport SynergyElement from '../../internal/synergy-element.js';\nimport SynButtonGroup from '../button-group/button-group.component.js';\nimport styles from './radio-group.styles.js';\nimport type { CSSResultGroup } from 'lit';\nimport type { SynergyFormControl } from '../../internal/synergy-element.js';\nimport type SynRadio from '../radio/radio.js';\nimport type SynRadioButton from '../radio-button/radio-button.js';\n\n/**\n * @summary Radio groups are used to group multiple [radios](/components/radio) or [radio buttons](/components/radio-button) so they function as a single form control.\n * @documentation https://synergy.style/components/radio-group\n * @status stable\n * @since 2.0\n *\n * @dependency syn-button-group\n *\n * @slot - The default slot where `<syn-radio>` or `<syn-radio-button>` elements are placed.\n * @slot label - The radio group's label. Required for proper accessibility. Alternatively, you can use the `label`\n *  attribute.\n *\n * @event syn-change - Emitted when the radio group's selected value changes.\n * @event syn-input - Emitted when the radio group receives user input.\n * @event syn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @csspart form-control - The form control that wraps the label, input, and help text.\n * @csspart form-control-label - The label's wrapper.\n * @csspart form-control-input - The input's wrapper.\n * @csspart form-control-help-text - The help text's wrapper.\n * @csspart button-group - The button group that wraps radio buttons.\n * @csspart button-group__base - The button group's `base` part.\n */\nexport default class SynRadioGroup extends SynergyElement implements SynergyFormControl {\n  static styles: CSSResultGroup = styles;\n  static dependencies = { 'syn-button-group': SynButtonGroup };\n\n  protected readonly formControlController = new FormControlController(this);\n  private readonly hasSlotController = new HasSlotController(this, 'help-text', 'label');\n  private customValidityMessage = '';\n  private validationTimeout: number;\n\n  @query('slot:not([name])') defaultSlot: HTMLSlotElement;\n  @query('.radio-group__validation-input') validationInput: HTMLInputElement;\n\n  @state() private hasButtonGroup = false;\n  @state() private errorMessage = '';\n  @state() defaultValue = '';\n\n  /**\n   * The radio group's label. Required for proper accessibility. If you need to display HTML, use the `label` slot\n   * instead.\n   */\n  @property() label = '';\n\n  /** The radio groups's help text. If you need to display HTML, use the `help-text` slot instead. */\n  @property({ attribute: 'help-text' }) helpText = '';\n\n  /** The name of the radio group, submitted as a name/value pair with form data. */\n  @property() name = 'option';\n\n  /** The current value of the radio group, submitted as a name/value pair with form data. */\n  @property({ reflect: true }) value = '';\n\n  /** The radio group's size. This size will be applied to all child radios and radio buttons. */\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\n   * to place the form control outside of a form and associate it with the form that has this `id`. The form must be in\n   * the same document or shadow root for this to work.\n   */\n  @property({ reflect: true }) form = '';\n\n  /** Ensures a child radio is checked before allowing the containing form to submit. */\n  @property({ type: Boolean, reflect: true }) required = false;\n\n  /** Gets the validity state object */\n  get validity() {\n    const isRequiredAndEmpty = this.required && !this.value;\n    const hasCustomValidityMessage = this.customValidityMessage !== '';\n\n    if (hasCustomValidityMessage) {\n      return customErrorValidityState;\n    } else if (isRequiredAndEmpty) {\n      return valueMissingValidityState;\n    }\n\n    return validValidityState;\n  }\n\n  /** Gets the validation message */\n  get validationMessage() {\n    const isRequiredAndEmpty = this.required && !this.value;\n    const hasCustomValidityMessage = this.customValidityMessage !== '';\n\n    if (hasCustomValidityMessage) {\n      return this.customValidityMessage;\n    } else if (isRequiredAndEmpty) {\n      return this.validationInput.validationMessage;\n    }\n\n    return '';\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.defaultValue = this.value;\n  }\n\n  firstUpdated() {\n    this.formControlController.updateValidity();\n  }\n\n  private getAllRadios() {\n    return [...this.querySelectorAll<SynRadio | SynRadioButton>('syn-radio, syn-radio-button')];\n  }\n\n  private handleRadioClick(event: MouseEvent) {\n    const target = (event.target as HTMLElement).closest<SynRadio | SynRadioButton>('syn-radio, syn-radio-button')!;\n    const radios = this.getAllRadios();\n    const oldValue = this.value;\n\n    if (target.disabled) {\n      return;\n    }\n\n    this.value = target.value;\n    radios.forEach(radio => (radio.checked = radio === target));\n\n    if (this.value !== oldValue) {\n      this.emit('syn-change');\n      this.emit('syn-input');\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent) {\n    if (!['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', ' '].includes(event.key)) {\n      return;\n    }\n\n    const radios = this.getAllRadios().filter(radio => !radio.disabled);\n    const checkedRadio = radios.find(radio => radio.checked) ?? radios[0];\n    const incr = event.key === ' ' ? 0 : ['ArrowUp', 'ArrowLeft'].includes(event.key) ? -1 : 1;\n    const oldValue = this.value;\n    let index = radios.indexOf(checkedRadio) + incr;\n\n    if (index < 0) {\n      index = radios.length - 1;\n    }\n\n    if (index > radios.length - 1) {\n      index = 0;\n    }\n\n    this.getAllRadios().forEach(radio => {\n      radio.checked = false;\n\n      if (!this.hasButtonGroup) {\n        radio.tabIndex = -1;\n      }\n    });\n\n    this.value = radios[index].value;\n    radios[index].checked = true;\n\n    if (!this.hasButtonGroup) {\n      radios[index].tabIndex = 0;\n      radios[index].focus();\n    } else {\n      radios[index].shadowRoot!.querySelector('button')!.focus();\n    }\n\n    if (this.value !== oldValue) {\n      this.emit('syn-change');\n      this.emit('syn-input');\n    }\n\n    event.preventDefault();\n  }\n\n  private handleLabelClick() {\n    const radios = this.getAllRadios();\n    const checked = radios.find(radio => radio.checked);\n    const radioToFocus = checked || radios[0];\n\n    // Move focus to the checked radio (or the first one if none are checked) when clicking the label\n    if (radioToFocus) {\n      radioToFocus.focus();\n    }\n  }\n\n  private handleInvalid(event: Event) {\n    this.formControlController.setValidity(false);\n    this.formControlController.emitInvalidEvent(event);\n  }\n\n  private async syncRadioElements() {\n    const radios = this.getAllRadios();\n\n    await Promise.all(\n      // Sync the checked state and size\n      radios.map(async radio => {\n        await radio.updateComplete;\n        radio.checked = radio.value === this.value;\n        radio.size = this.size;\n      })\n    );\n\n    this.hasButtonGroup = radios.some(radio => radio.tagName.toLowerCase() === 'syn-radio-button');\n\n    if (!radios.some(radio => radio.checked)) {\n      if (this.hasButtonGroup) {\n        const buttonRadio = radios[0].shadowRoot?.querySelector('button');\n\n        if (buttonRadio) {\n          buttonRadio.tabIndex = 0;\n        }\n      } else {\n        radios[0].tabIndex = 0;\n      }\n    }\n\n    if (this.hasButtonGroup) {\n      const buttonGroup = this.shadowRoot?.querySelector('syn-button-group');\n\n      if (buttonGroup) {\n        buttonGroup.disableRole = true;\n      }\n    }\n  }\n\n  private syncRadios() {\n    if (customElements.get('syn-radio') && customElements.get('syn-radio-button')) {\n      this.syncRadioElements();\n      return;\n    }\n\n    if (customElements.get('syn-radio')) {\n      this.syncRadioElements();\n    } else {\n      customElements.whenDefined('syn-radio').then(() => this.syncRadios());\n    }\n\n    if (customElements.get('syn-radio-button')) {\n      this.syncRadioElements();\n    } else {\n      // Rerun this handler when <syn-radio> or <syn-radio-button> is registered\n      customElements.whenDefined('syn-radio-button').then(() => this.syncRadios());\n    }\n  }\n\n  private updateCheckedRadio() {\n    const radios = this.getAllRadios();\n    radios.forEach(radio => (radio.checked = radio.value === this.value));\n    this.formControlController.setValidity(this.validity.valid);\n  }\n\n  @watch('size', { waitUntilFirstUpdate: true })\n  handleSizeChange() {\n    this.syncRadios();\n  }\n\n  @watch('value')\n  handleValueChange() {\n    if (this.hasUpdated) {\n      this.updateCheckedRadio();\n    }\n  }\n\n  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */\n  checkValidity() {\n    const isRequiredAndEmpty = this.required && !this.value;\n    const hasCustomValidityMessage = this.customValidityMessage !== '';\n\n    if (isRequiredAndEmpty || hasCustomValidityMessage) {\n      this.formControlController.emitInvalidEvent();\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Gets the associated form, if one exists. */\n  getForm(): HTMLFormElement | null {\n    return this.formControlController.getForm();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  reportValidity(): boolean {\n    const isValid = this.validity.valid;\n\n    this.errorMessage = this.customValidityMessage || isValid ? '' : this.validationInput.validationMessage;\n    this.formControlController.setValidity(isValid);\n    this.validationInput.hidden = true;\n    clearTimeout(this.validationTimeout);\n\n    if (!isValid) {\n      // Show the browser's constraint validation message\n      this.validationInput.hidden = false;\n      this.validationInput.reportValidity();\n      this.validationTimeout = setTimeout(() => (this.validationInput.hidden = true), 10000) as unknown as number;\n    }\n\n    return isValid;\n  }\n\n  /** Sets a custom validation message. Pass an empty string to restore validity. */\n  setCustomValidity(message = '') {\n    this.customValidityMessage = message;\n    this.errorMessage = message;\n    this.validationInput.setCustomValidity(message);\n    this.formControlController.updateValidity();\n  }\n\n  render() {\n    const hasLabelSlot = this.hasSlotController.test('label');\n    const hasHelpTextSlot = this.hasSlotController.test('help-text');\n    const hasLabel = this.label ? true : !!hasLabelSlot;\n    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;\n    const defaultSlot = html`\n      <slot @slotchange=${this.syncRadios} @click=${this.handleRadioClick} @keydown=${this.handleKeyDown}></slot>\n    `;\n\n    return html`\n      <fieldset\n        part=\"form-control\"\n        class=${classMap({\n          'form-control': true,\n          'form-control--small': this.size === 'small',\n          'form-control--medium': this.size === 'medium',\n          'form-control--large': this.size === 'large',\n          'form-control--radio-group': true,\n          'form-control--has-label': hasLabel,\n          'form-control--has-help-text': hasHelpText\n        })}\n        role=\"radiogroup\"\n        aria-labelledby=\"label\"\n        aria-describedby=\"help-text\"\n        aria-errormessage=\"error-message\"\n      >\n        <label\n          part=\"form-control-label\"\n          id=\"label\"\n          class=\"form-control__label\"\n          aria-hidden=${hasLabel ? 'false' : 'true'}\n          @click=${this.handleLabelClick}\n        >\n          <slot name=\"label\">${this.label}</slot>\n        </label>\n\n        <div part=\"form-control-input\" class=\"form-control-input\">\n          <div class=\"visually-hidden\">\n            <div id=\"error-message\" aria-live=\"assertive\">${this.errorMessage}</div>\n            <label class=\"radio-group__validation\">\n              <input\n                type=\"text\"\n                class=\"radio-group__validation-input\"\n                ?required=${this.required}\n                tabindex=\"-1\"\n                hidden\n                @invalid=${this.handleInvalid}\n              />\n            </label>\n          </div>\n\n          ${this.hasButtonGroup\n            ? html`\n                <syn-button-group part=\"button-group\" exportparts=\"base:button-group__base\" role=\"presentation\">\n                  ${defaultSlot}\n                </syn-button-group>\n              `\n            : defaultSlot}\n        </div>\n\n        <div\n          part=\"form-control-help-text\"\n          id=\"help-text\"\n          class=\"form-control__help-text\"\n          aria-hidden=${hasHelpText ? 'false' : 'true'}\n        >\n          <slot name=\"help-text\">${this.helpText}</slot>\n        </div>\n      </fieldset>\n    `;\n  }\n}\n","// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n/* eslint-disable */\nimport SynRadioGroup from './radio-group.component.js';\n\nexport * from './radio-group.component.js';\nexport default SynRadioGroup;\n\nSynRadioGroup.define('syn-radio-group');\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'syn-radio-group': SynRadioGroup;\n  }\n}\n"],"names":["styles$1","css","componentStyles","SynButtonGroup","SynergyElement","event","findButton","slottedElements","el","index","button","html","styles","__decorateClass","query","state","property","selector","customStyles","formControlStyles","SynRadioGroup","FormControlController","HasSlotController","isRequiredAndEmpty","customErrorValidityState","valueMissingValidityState","validValidityState","target","radios","oldValue","radio","checkedRadio","incr","radioToFocus","buttonRadio","buttonGroup","hasCustomValidityMessage","isValid","message","hasLabelSlot","hasHelpTextSlot","hasLabel","hasHelpText","defaultSlot","classMap","watch"],"mappings":"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"}