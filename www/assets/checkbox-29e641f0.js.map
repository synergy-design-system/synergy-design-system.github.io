{"version":3,"file":"checkbox-29e641f0.js","sources":["../../../components/src/components/checkbox/checkbox.custom.styles.ts","../../../components/src/components/checkbox/checkbox.styles.ts","../../../components/src/components/checkbox/checkbox.component.ts","../../../components/src/components/checkbox/checkbox.ts"],"sourcesContent":["import { css } from 'lit';\n\nexport default css`\n  .checkbox__control {\n    border-radius: var(--syn-input-border-radius-small);\n  }\n\n  :host([data-user-invalid]) .checkbox__control {\n    border-color: var(--syn-input-border-color-focus-error);\n  }\n\n  /**\n   * Hover\n   * Applies the hover state to the whole component\n   */\n  .checkbox:not(.checkbox--checked):not(.checkbox--disabled):hover .checkbox__control {\n    background-color: var(--syn-input-background-color-hover);\n    border-color: var(--syn-input-border-color-hover);\n  }\n\n  /**\n   * Checked/indeterminate + hover\n   * Applies the hover state to the whole component\n   */\n  .checkbox.checkbox--checked:not(.checkbox--disabled):hover .checkbox__control,\n  .checkbox.checkbox--indeterminate:not(.checkbox--disabled):hover .checkbox__control {\n    background-color: var(--syn-color-primary-900);\n    border-color: var(--syn-color-primary-900);\n  }\n\n  .checkbox__label {\n    margin-inline-start: var(--syn-spacing-x-small);\n  }\n\n  /* Disabled */\n  .checkbox--disabled .checkbox__label {\n    color: var(--syn-color-neutral-700);\n  }\n`;\n","// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n/* eslint-disable */\nimport { css } from 'lit';\nimport customStyles from './checkbox.custom.styles.js';\nimport componentStyles from '../../styles/component.styles.js';\n\nexport default css`\n\t/* stylelint-disable */\n  ${componentStyles}\n\n  :host {\n    display: inline-block;\n  }\n\n  .checkbox {\n    position: relative;\n    display: inline-flex;\n    align-items: flex-start;\n    font-family: var(--syn-input-font-family);\n    font-weight: var(--syn-input-font-weight);\n    color: var(--syn-input-label-color);\n    vertical-align: middle;\n    cursor: pointer;\n  }\n\n  .checkbox--small {\n    --toggle-size: var(--syn-toggle-size-small);\n    font-size: var(--syn-input-font-size-small);\n  }\n\n  .checkbox--medium {\n    --toggle-size: var(--syn-toggle-size-medium);\n    font-size: var(--syn-input-font-size-medium);\n  }\n\n  .checkbox--large {\n    --toggle-size: var(--syn-toggle-size-large);\n    font-size: var(--syn-input-font-size-large);\n  }\n\n  .checkbox__control {\n    flex: 0 0 auto;\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: var(--toggle-size);\n    height: var(--toggle-size);\n    border: solid var(--syn-input-border-width) var(--syn-input-border-color);\n    border-radius: 2px;\n    background-color: var(--syn-input-background-color);\n    color: var(--syn-color-neutral-0);\n    transition:\n      var(--syn-transition-fast) border-color,\n      var(--syn-transition-fast) background-color,\n      var(--syn-transition-fast) color,\n      var(--syn-transition-fast) box-shadow;\n  }\n\n  .checkbox__input {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n\n  .checkbox__checked-icon,\n  .checkbox__indeterminate-icon {\n    display: inline-flex;\n    width: var(--toggle-size);\n    height: var(--toggle-size);\n  }\n\n  /* Hover */\n  .checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control:hover {\n    border-color: var(--syn-input-border-color-hover);\n    background-color: var(--syn-input-background-color-hover);\n  }\n\n  /* Focus */\n  .checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control {\n    outline: var(--syn-focus-ring);\n    outline-offset: var(--syn-focus-ring-offset);\n  }\n\n  /* Checked/indeterminate */\n  .checkbox--checked .checkbox__control,\n  .checkbox--indeterminate .checkbox__control {\n    border-color: var(--syn-color-primary-600);\n    background-color: var(--syn-color-primary-600);\n  }\n\n  /* Checked/indeterminate + hover */\n  .checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__control:hover,\n  .checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__control:hover {\n    border-color: var(--syn-color-primary-500);\n    background-color: var(--syn-color-primary-500);\n  }\n\n  /* Checked/indeterminate + focus */\n  .checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control,\n  .checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control {\n    outline: var(--syn-focus-ring);\n    outline-offset: var(--syn-focus-ring-offset);\n  }\n\n  /* Disabled */\n  .checkbox--disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  .checkbox__label {\n    display: inline-block;\n    color: var(--syn-input-label-color);\n    line-height: var(--toggle-size);\n    margin-inline-start: 0.5em;\n    user-select: none;\n    -webkit-user-select: none;\n  }\n\n  :host([required]) .checkbox__label::after {\n    content: var(--syn-input-required-content);\n    margin-inline-start: var(--syn-input-required-content-offset);\n  }\n\n  ${customStyles}\n`;\n\n","// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n/* eslint-disable */\nimport { classMap } from 'lit/directives/class-map.js';\nimport { defaultValue } from '../../internal/default-value.js';\nimport { FormControlController } from '../../internal/form.js';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { property, query, state } from 'lit/decorators.js';\nimport { watch } from '../../internal/watch.js';\nimport SynergyElement from '../../internal/synergy-element.js';\nimport SynIcon from '../icon/icon.component.js';\nimport styles from './checkbox.styles.js';\nimport type { CSSResultGroup } from 'lit';\nimport type { SynergyFormControl } from '../../internal/synergy-element.js';\n\n/**\n * @summary Checkboxes allow the user to toggle an option on or off.\n * @documentation https://synergy.style/components/checkbox\n * @status stable\n * @since 2.0\n *\n * @dependency syn-icon\n *\n * @slot - The checkbox's label.\n *\n * @event syn-blur - Emitted when the checkbox loses focus.\n * @event syn-change - Emitted when the checked state changes.\n * @event syn-focus - Emitted when the checkbox gains focus.\n * @event syn-input - Emitted when the checkbox receives input.\n * @event syn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.\n *\n * @csspart base - The component's base wrapper.\n * @csspart control - The square container that wraps the checkbox's checked state.\n * @csspart control--checked - Matches the control part when the checkbox is checked.\n * @csspart control--indeterminate - Matches the control part when the checkbox is indeterminate.\n * @csspart checked-icon - The checked icon, an `<syn-icon>` element.\n * @csspart indeterminate-icon - The indeterminate icon, an `<syn-icon>` element.\n * @csspart label - The container that wraps the checkbox's label.\n */\nexport default class SynCheckbox extends SynergyElement implements SynergyFormControl {\n  static styles: CSSResultGroup = styles;\n  static dependencies = { 'syn-icon': SynIcon };\n\n  private readonly formControlController = new FormControlController(this, {\n    value: (control: SynCheckbox) => (control.checked ? control.value || 'on' : undefined),\n    defaultValue: (control: SynCheckbox) => control.defaultChecked,\n    setValue: (control: SynCheckbox, checked: boolean) => (control.checked = checked)\n  });\n\n  @query('input[type=\"checkbox\"]') input: HTMLInputElement;\n\n  @state() private hasFocus = false;\n\n  @property() title = ''; // make reactive to pass through\n\n  /** The name of the checkbox, submitted as a name/value pair with form data. */\n  @property() name = '';\n\n  /** The current value of the checkbox, submitted as a name/value pair with form data. */\n  @property() value: string;\n\n  /** The checkbox's size. */\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Disables the checkbox. */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /** Draws the checkbox in a checked state. */\n  @property({ type: Boolean, reflect: true }) checked = false;\n\n  /**\n   * Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\n   * all/none\" behavior when associated checkboxes have a mix of checked and unchecked states.\n   */\n  @property({ type: Boolean, reflect: true }) indeterminate = false;\n\n  /** The default value of the form control. Primarily used for resetting the form control. */\n  @defaultValue('checked') defaultChecked = false;\n\n  /**\n   * By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\n   * to place the form control outside of a form and associate it with the form that has this `id`. The form must be in\n   * the same document or shadow root for this to work.\n   */\n  @property({ reflect: true }) form = '';\n\n  /** Makes the checkbox a required field. */\n  @property({ type: Boolean, reflect: true }) required = false;\n\n  /** Gets the validity state object */\n  get validity() {\n    return this.input.validity;\n  }\n\n  /** Gets the validation message */\n  get validationMessage() {\n    return this.input.validationMessage;\n  }\n\n  firstUpdated() {\n    this.formControlController.updateValidity();\n  }\n\n  private handleClick() {\n    this.checked = !this.checked;\n    this.indeterminate = false;\n    this.emit('syn-change');\n  }\n\n  private handleBlur() {\n    this.hasFocus = false;\n    this.emit('syn-blur');\n  }\n\n  private handleInput() {\n    this.emit('syn-input');\n  }\n\n  private handleInvalid(event: Event) {\n    this.formControlController.setValidity(false);\n    this.formControlController.emitInvalidEvent(event);\n  }\n\n  private handleFocus() {\n    this.hasFocus = true;\n    this.emit('syn-focus');\n  }\n\n  @watch('disabled', { waitUntilFirstUpdate: true })\n  handleDisabledChange() {\n    // Disabled form controls are always valid\n    this.formControlController.setValidity(this.disabled);\n  }\n\n  @watch(['checked', 'indeterminate'], { waitUntilFirstUpdate: true })\n  handleStateChange() {\n    this.input.checked = this.checked; // force a sync update\n    this.input.indeterminate = this.indeterminate; // force a sync update\n    this.formControlController.updateValidity();\n  }\n\n  /** Simulates a click on the checkbox. */\n  click() {\n    this.input.click();\n  }\n\n  /** Sets focus on the checkbox. */\n  focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the checkbox. */\n  blur() {\n    this.input.blur();\n  }\n\n  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n\n  /** Gets the associated form, if one exists. */\n  getForm(): HTMLFormElement | null {\n    return this.formControlController.getForm();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /**\n   * Sets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear\n   * the custom validation message, call this method with an empty string.\n   */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.formControlController.updateValidity();\n  }\n\n  render() {\n    //\n    // NOTE: we use a <div> around the label slot because of this Chrome bug.\n    //\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1413733\n    //\n    return html`\n      <label\n        part=\"base\"\n        class=${classMap({\n          checkbox: true,\n          'checkbox--checked': this.checked,\n          'checkbox--disabled': this.disabled,\n          'checkbox--focused': this.hasFocus,\n          'checkbox--indeterminate': this.indeterminate,\n          'checkbox--small': this.size === 'small',\n          'checkbox--medium': this.size === 'medium',\n          'checkbox--large': this.size === 'large'\n        })}\n      >\n        <input\n          class=\"checkbox__input\"\n          type=\"checkbox\"\n          title=${this.title /* An empty title prevents browser validation tooltips from appearing on hover */}\n          name=${this.name}\n          value=${ifDefined(this.value)}\n          .indeterminate=${live(this.indeterminate)}\n          .checked=${live(this.checked)}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          aria-checked=${this.checked ? 'true' : 'false'}\n          @click=${this.handleClick}\n          @input=${this.handleInput}\n          @invalid=${this.handleInvalid}\n          @blur=${this.handleBlur}\n          @focus=${this.handleFocus}\n        />\n\n        <span\n          part=\"control${this.checked ? ' control--checked' : ''}${this.indeterminate ? ' control--indeterminate' : ''}\"\n          class=\"checkbox__control\"\n        >\n          ${this.checked\n            ? html`\n                <syn-icon part=\"checked-icon\" class=\"checkbox__checked-icon\" library=\"system\" name=\"check\"></syn-icon>\n              `\n            : ''}\n          ${!this.checked && this.indeterminate\n            ? html`\n                <syn-icon\n                  part=\"indeterminate-icon\"\n                  class=\"checkbox__indeterminate-icon\"\n                  library=\"system\"\n                  name=\"indeterminate\"\n                ></syn-icon>\n              `\n            : ''}\n        </span>\n\n        <div part=\"label\" class=\"checkbox__label\">\n          <slot></slot>\n        </div>\n      </label>\n    `;\n  }\n}\n","// ---------------------------------------------------------------------\n// ðŸ”’ AUTOGENERATED BY VENDORISM\n// Removing this comment will prevent it from being managed by it.\n// ---------------------------------------------------------------------\n\n/* eslint-disable */\nimport SynCheckbox from './checkbox.component.js';\n\nexport * from './checkbox.component.js';\nexport default SynCheckbox;\n\nSynCheckbox.define('syn-checkbox');\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'syn-checkbox': SynCheckbox;\n  }\n}\n"],"names":["customStyles","css","styles","componentStyles","SynCheckbox","SynergyElement","FormControlController","control","checked","event","options","message","html","classMap","ifDefined","live","SynIcon","__decorateClass","query","state","property","defaultValue","watch"],"mappings":"8YAEA,MAAAA,EAAeC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,ECQfC,EAAeD;AAAAA;AAAAA,IAEXE,CAAeuHfH,CAAY;AAAA,kMCvFhB,MAAqBI,UAAoBC,CAA6C,CAAtF,aAAA,CAAA,MAAA,GAAA,SAAA,EAImB,KAAA,sBAAwB,IAAIC,EAAsB,KAAM,CACvE,MAAQC,GAA0BA,EAAQ,QAAUA,EAAQ,OAAS,KAAO,OAC5E,aAAeA,GAAyBA,EAAQ,eAChD,SAAU,CAACA,EAAsBC,IAAsBD,EAAQ,QAAUC,CAAA,CAC1E,EAIQ,KAAQ,SAAW,GAER,KAAA,MAAA,GAGD,KAAA,KAAA,GAM+C,KAAA,KAAA,SAGX,KAAA,SAAA,GAGD,KAAA,QAAA,GAMM,KAAA,cAAA,GAGlB,KAAA,eAAA,GAON,KAAA,KAAA,GAGmB,KAAA,SAAA,EAAA,CAGvD,IAAI,UAAW,CACb,OAAO,KAAK,MAAM,QACpB,CAGA,IAAI,mBAAoB,CACtB,OAAO,KAAK,MAAM,iBACpB,CAEA,cAAe,CACb,KAAK,sBAAsB,gBAC7B,CAEQ,aAAc,CACf,KAAA,QAAU,CAAC,KAAK,QACrB,KAAK,cAAgB,GACrB,KAAK,KAAK,YAAY,CACxB,CAEQ,YAAa,CACnB,KAAK,SAAW,GAChB,KAAK,KAAK,UAAU,CACtB,CAEQ,aAAc,CACpB,KAAK,KAAK,WAAW,CACvB,CAEQ,cAAcC,EAAc,CAC7B,KAAA,sBAAsB,YAAY,EAAK,EACvC,KAAA,sBAAsB,iBAAiBA,CAAK,CACnD,CAEQ,aAAc,CACpB,KAAK,SAAW,GAChB,KAAK,KAAK,WAAW,CACvB,CAGA,sBAAuB,CAEhB,KAAA,sBAAsB,YAAY,KAAK,QAAQ,CACtD,CAGA,mBAAoB,CACb,KAAA,MAAM,QAAU,KAAK,QACrB,KAAA,MAAM,cAAgB,KAAK,cAChC,KAAK,sBAAsB,gBAC7B,CAGA,OAAQ,CACN,KAAK,MAAM,OACb,CAGA,MAAMC,EAAwB,CACvB,KAAA,MAAM,MAAMA,CAAO,CAC1B,CAGA,MAAO,CACL,KAAK,MAAM,MACb,CAGA,eAAgB,CACP,OAAA,KAAK,MAAM,eACpB,CAGA,SAAkC,CACzB,OAAA,KAAK,sBAAsB,SACpC,CAGA,gBAAiB,CACR,OAAA,KAAK,MAAM,gBACpB,CAMA,kBAAkBC,EAAiB,CAC5B,KAAA,MAAM,kBAAkBA,CAAO,EACpC,KAAK,sBAAsB,gBAC7B,CAEA,QAAS,CAMA,OAAAC;AAAAA;AAAAA;AAAAA,gBAGKC,EAAS,CACf,SAAU,GACV,oBAAqB,KAAK,QAC1B,qBAAsB,KAAK,SAC3B,oBAAqB,KAAK,SAC1B,0BAA2B,KAAK,cAChC,kBAAmB,KAAK,OAAS,QACjC,mBAAoB,KAAK,OAAS,SAClC,kBAAmB,KAAK,OAAS,OAAA,CAClC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKQ,KAAK,KAAuF;AAAA,iBAC7F,KAAK,IAAI;AAAA,kBACRC,EAAU,KAAK,KAAK,CAAC;AAAA,2BACZC,EAAK,KAAK,aAAa,CAAC;AAAA,qBAC9BA,EAAK,KAAK,OAAO,CAAC;AAAA,sBACjB,KAAK,QAAQ;AAAA,sBACb,KAAK,QAAQ;AAAA,yBACV,KAAK,QAAU,OAAS,OAAO;AAAA,mBACrC,KAAK,WAAW;AAAA,mBAChB,KAAK,WAAW;AAAA,qBACd,KAAK,aAAa;AAAA,kBACrB,KAAK,UAAU;AAAA,mBACd,KAAK,WAAW;AAAA;AAAA;AAAA;AAAA,yBAIV,KAAK,QAAU,oBAAsB,EAAE,GAAG,KAAK,cAAgB,0BAA4B,EAAE;AAAA;AAAA;AAAA,YAG1G,KAAK,QACHH;AAAAA;AAAAA,gBAGA,EAAE;AAAA,YACJ,CAAC,KAAK,SAAW,KAAK,cACpBA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,gBAQA,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQd,CACF,CA9MqBR,EACZ,OAAyBF,EADbE,EAEZ,aAAe,CAAE,WAAYY,GAQHC,EAAA,CAAhCC,EAAM,wBAAwB,CAAA,EAVZd,EAUc,UAAA,QAAA,CAAA,EAEhBa,EAAA,CAAhBE,EAAM,CAAA,EAZYf,EAYF,UAAA,WAAA,CAAA,EAELa,EAAA,CAAXG,EAAS,CAAA,EAdShB,EAcP,UAAA,QAAA,CAAA,EAGAa,EAAA,CAAXG,EAAS,CAAA,EAjBShB,EAiBP,UAAA,OAAA,CAAA,EAGAa,EAAA,CAAXG,EAAS,CAAA,EApBShB,EAoBP,UAAA,QAAA,CAAA,EAGiBa,EAAA,CAA5BG,EAAS,CAAE,QAAS,GAAM,CAAA,EAvBRhB,EAuBU,UAAA,OAAA,CAAA,EAGea,EAAA,CAA3CG,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,CAAA,EA1BvBhB,EA0ByB,UAAA,WAAA,CAAA,EAGAa,EAAA,CAA3CG,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,CAAA,EA7BvBhB,EA6ByB,UAAA,UAAA,CAAA,EAMAa,EAAA,CAA3CG,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,CAAA,EAnCvBhB,EAmCyB,UAAA,gBAAA,CAAA,EAGnBa,EAAA,CAAxBI,EAAa,SAAS,CAAA,EAtCJjB,EAsCM,UAAA,iBAAA,CAAA,EAOIa,EAAA,CAA5BG,EAAS,CAAE,QAAS,GAAM,CAAA,EA7CRhB,EA6CU,UAAA,OAAA,CAAA,EAGea,EAAA,CAA3CG,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,CAAA,EAhDvBhB,EAgDyB,UAAA,WAAA,CAAA,EA0C5Ca,EAAA,CADCK,EAAM,WAAY,CAAE,qBAAsB,GAAM,CAAA,EAzF9BlB,EA0FnB,UAAA,uBAAA,CAAA,EAMAa,EAAA,CADCK,EAAM,CAAC,UAAW,eAAe,EAAG,CAAE,qBAAsB,GAAM,CAAA,EA/FhDlB,EAgGnB,UAAA,oBAAA,CAAA,ECjIFA,EAAY,OAAO,cAAc"}